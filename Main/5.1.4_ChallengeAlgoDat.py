#%% [markdown]
# ### Challenge 1
# If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
# Find the sum of all the multiples of 3 or 5 below 1000.

#%%
import numpy as np
n = 1000

multiples = []
for i in range(1, n):
    if i % 3 == 0 or i % 5 == 0:
        multiples.append(i)
print(np.array(multiples).sum())  # 233168
#%% [markdown]
# ### Challenge 2: Even Fibonacci numbers
# Each new term in the Fibonacci sequence is generated by adding the previous two terms.
# By starting with 1 and 2, the first 10 terms will be:
# 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
# By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
#%%


def fib(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fib(n-1) + fib(n-2)


fibu_num = 0
fibus = []
while fibu_num < 4000000:
    fibu_num = fib(i)
    if fibu_num % 2 == 0:
        fibus.append(fibu_num)
    i = i + 1
print(np.array(fibus).sum())  # 4613722

#%%
#%% [markdown]
# ### Challenge 3: prime factor
# The prime factors of 13195 are 5, 7, 13 and 29.
# What is the largest prime factor of the number 600851475143 ?
#%%
def primes_fak(n):
    primfac = []
    d = 2
    while d*d <= n:
        while (n % d) == 0:
            primfac.append(d)  # supposing you want multiple factors repeated
            n //= d
        d += 1
    if n > 1:
        primfac.append(n)
    return primfac


print(primes_fak(600851475143))  # [71, 839, 1471, 6857]

#%% [markdown]
# ### Challenge 4: Largest palindrome product
# A palindromic number reads the same both ways.
# The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99.
# Find the largest palindrome made from the product of two 3-digit numbers.
#%%
def is_palindrom(num):
    temp = num
    rev = 0
    while(num > 0):
        dig = num % 10
        rev = rev*10+dig
        num = num//10
    if(temp == rev):
        return True
    else:
        return False

palindroms = []
for i in range(999, 800, -1):
    for j in range(999, 800, -1):
        sum = i * j
        if is_palindrom(sum):
            palindroms.append(sum)
print(np.array(palindroms).max()) # 906609

#%% [markdown]
# ### Challenge 5: Smallest multiple
# 2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.
# What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?

n = 20
j = 2500
def search_div(j):
    x = 0
    while True:
        for i in range(2, n+1):
            if j % i == 0:
                if i != n:
                    continue
                else:
                    x = 1000
                    break
            else:
                j = j + 1
                break
        if x == 1000:
            print(j)
            break
        else:
            search_div(j)
search_div(j)
print(j)

# FAILED

#%% [markdown]
# ### Challenge 6: Sum square difference
# The sum of the squares of the first ten natural numbers is,
# 12 + 22 + ... + 102 = 385
# The square of the sum of the first ten natural numbers is,
# (1 + 2 + ... + 10)2 = 552 = 3025
# Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is 3025 − 385 = 2640.
# Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.
#%%
n = 100
sum1 = []
sum2 = 0
for i in range(1, n+1):
    sum1.append(i**2)
    sum2 = sum2 + i
sum2 = sum2 ** 2
print(sum2 - np.array(sum1).sum())
#%% [markdown]
# ### Challenge 7: 10001st prime
# By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.
# What is the 10 001st prime number?
#%%
def primes(n):
    """ Returns  a list of primes < n """
    sieve = [True] * n
    for i in range(3,int(n**0.5)+1,2):
        if sieve[i]:
            sieve[i*i::2*i]=[False]*((n-i*i-1)//(2*i)+1)
    return [2] + [i for i in range(3,n,2) if sieve[i]]

l = 101000
k = 0
while k < 10001:
    k = len(primes(l))
    l = l + 1

print(primes(l)[-1])
#%% [markdown]
# ### Challenge 8: Largest product in a series
# The four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832.
# 73167176531330624919225119674426574742355349194934
# 96983520312774506326239578318016984801869478851843
# 85861560789112949495459501737958331952853208805511
# 12540698747158523863050715693290963295227443043557
# 66896648950445244523161731856403098711121722383113
# 62229893423380308135336276614282806444486645238749
# 30358907296290491560440772390713810515859307960866
# 70172427121883998797908792274921901699720888093776
# 65727333001053367881220235421809751254540594752243
# 52584907711670556013604839586446706324415722155397
# 53697817977846174064955149290862569321978468622482
# 83972241375657056057490261407972968652414535100474
# 82166370484403199890008895243450658541227588666881
# 16427171479924442928230863465674813919123162824586
# 17866458359124566529476545682848912883142607690042
# 24219022671055626321111109370544217506941658960408
# 07198403850962455444362981230987879927244284909188
# 84580156166097919133875499200524063689912560717606
# 05886116467109405077541002256983155200055935729725
# 71636269561882670428252483600823257530420752963450
# Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product?
#%%
nums = '7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450'
arr = []
arr_index = []
index = 12
while index < len(nums):
    print(index)
    start = 0
    arr_index.append(list(nums[start:index]))
    arr.append(np.array(list(nums[start:index])).astype(int).prod())
    index = index + 1
    start = start + 1
print('Numbers: ', arr_index[np.argmax(np.array(arr))])
print('Max: ', np.amax(np.array(arr)))
#%%
#%% [markdown]
# ### Challenge 9: Special Pythagorean triplet
# A Pythagorean triplet is a set of three natural numbers, a < b < c, for which,

# a2 + b2 = c2
# For example, 3^2 + 4^2 = 9 + 16 = 25 = 5^2.

# There exists exactly one Pythagorean triplet for which a + b + c = 1000.
# Find the product abc.

#%%
for a in range(1, 1000 +1):
    for b in range(a+1, 1000 +1):
        c = 1000 - a - b
        if a * a + b * b == c *c:
            print(a, b, c) # 200 375 425
#%% [markdown]
# ### Challenge 10: Summation of primes
# The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.
# Find the sum of all the primes below two million.
#%%
np.array(primes(2000000)).sum() #142913828922